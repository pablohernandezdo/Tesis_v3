import torch.nn as nn
import torch.nn.functional as F

# CNN TIPO 1 CON UNA CAPA LINEAL

class CNN_LSTM(nn.Module):
    def __init__(self):
        super(CNN_LSTM, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(500, 800, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(800, 1000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(1000, 1000)
        self.l2 = nn.Linear(1000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(200)
        self.bn5 = nn.BatchNorm1d(300)
        self.bn6 = nn.BatchNorm1d(500)
        self.bn7 = nn.BatchNorm1d(800)
        self.bn8 = nn.BatchNorm1d(1000)

        self.bilstm = nn.LSTM(100, 100, 2, batch_first=True)
        self.lstm = nn.LSTM(100, 100, 1, batch_first=True)

        self.l1 = nn.Linear(100, 1)

        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        # VIEW
        wave = wave.view(-1, 1, 6000)

        # CNN
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)

        # View
        wave = wave.view(32, 10, 100)

        # BI LSTM
        wave, _ = self.bilstm(wave)

        # LSTM
        wave, _ = self.lstm(wave)

        # Linear
        wave = self.l1(wave[:, -1, :])

        return self.sigmoid(wave)


class Cnn1_6k(nn.Module):
    def __init__(self):
        super(Cnn1_6k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 6000, 10)
        self.l1 = nn.Linear(6000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(6000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = self.l1(wave)
        return self.sigmoid(wave)


class Cnn1_5k(nn.Module):
    def __init__(self):
        super(Cnn1_5k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 5000, 10)
        self.l1 = nn.Linear(5000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(5000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = self.l1(wave)
        return self.sigmoid(wave)


class Cnn1_4k(nn.Module):
    def __init__(self):
        super(Cnn1_4k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 4000, 10)
        self.l1 = nn.Linear(4000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(4000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = self.l1(wave)
        return self.sigmoid(wave)


class Cnn1_3k(nn.Module):
    def __init__(self):
        super(Cnn1_3k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 3000, 10)
        self.l1 = nn.Linear(3000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(3000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = self.l1(wave)
        return self.sigmoid(wave)


class Cnn1_2k(nn.Module):
    def __init__(self):
        super(Cnn1_2k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 2000, 10)
        self.l1 = nn.Linear(2000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(2000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = self.l1(wave)
        return self.sigmoid(wave)


class Cnn1_1k(nn.Module):
    def __init__(self):
        super(Cnn1_1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 50, 2, stride=2)
        self.conv2 = nn.Conv1d(50, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv4 = nn.Conv1d(500, 1000, 10)
        self.l1 = nn.Linear(1000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(50)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(1000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = self.l1(wave)
        return self.sigmoid(wave)


class Cnn1_5h(nn.Module):
    def __init__(self):
        super(Cnn1_5h, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 200, 2, stride=2)
        self.conv4 = nn.Conv1d(200, 500, 10)
        self.l1 = nn.Linear(500, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(200)
        self.bn4 = nn.BatchNorm1d(500)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = self.l1(wave)
        return self.sigmoid(wave)


class Cnn1_2h(nn.Module):
    def __init__(self):
        super(Cnn1_2h, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 50, 2, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 2, stride=2)
        self.conv4 = nn.Conv1d(100, 200, 10)
        self.l1 = nn.Linear(200, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(200)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = self.l1(wave)
        return self.sigmoid(wave)


class Cnn1_1h(nn.Module):
    def __init__(self):
        super(Cnn1_1h, self).__init__()

        self.conv1 = nn.Conv1d(1, 5, 2, stride=2)
        self.conv2 = nn.Conv1d(5, 10, 2, stride=2)
        self.conv3 = nn.Conv1d(10, 50, 2, stride=2)
        self.conv4 = nn.Conv1d(50, 100, 10)
        self.l1 = nn.Linear(100, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(5)
        self.bn2 = nn.BatchNorm1d(10)
        self.bn3 = nn.BatchNorm1d(50)
        self.bn4 = nn.BatchNorm1d(100)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = self.l1(wave)
        return self.sigmoid(wave)


class Cnn1_10(nn.Module):
    def __init__(self):
        super(Cnn1_10, self).__init__()

        self.conv1 = nn.Conv1d(1, 2, 2, stride=2)
        self.conv2 = nn.Conv1d(2, 5, 2, stride=2)
        self.conv3 = nn.Conv1d(5, 10, 2, stride=2)
        self.conv4 = nn.Conv1d(10, 10, 10)
        self.l1 = nn.Linear(10, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(2)
        self.bn2 = nn.BatchNorm1d(5)
        self.bn3 = nn.BatchNorm1d(10)
        self.bn4 = nn.BatchNorm1d(10)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = self.l1(wave)
        return self.sigmoid(wave)


# CNN TIPO 1 CON DOS CAPAS LINEALEs


class Cnn1_6k_6k(nn.Module):
    def __init__(self):
        super(Cnn1_6k_6k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 6000, 10)
        self.l1 = nn.Linear(6000, 6000)
        self.l2 = nn.Linear(6000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(6000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_6k_5k(nn.Module):
    def __init__(self):
        super(Cnn1_6k_5k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 6000, 10)
        self.l1 = nn.Linear(6000, 5000)
        self.l2 = nn.Linear(5000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(6000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_6k_4k(nn.Module):
    def __init__(self):
        super(Cnn1_6k_4k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 6000, 10)
        self.l1 = nn.Linear(6000, 4000)
        self.l2 = nn.Linear(4000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(6000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_6k_3k(nn.Module):
    def __init__(self):
        super(Cnn1_6k_3k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 6000, 10)
        self.l1 = nn.Linear(6000, 3000)
        self.l2 = nn.Linear(3000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(6000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_6k_2k(nn.Module):
    def __init__(self):
        super(Cnn1_6k_2k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 6000, 10)
        self.l1 = nn.Linear(6000, 2000)
        self.l2 = nn.Linear(2000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(6000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_6k_1k(nn.Module):
    def __init__(self):
        super(Cnn1_6k_1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 6000, 10)
        self.l1 = nn.Linear(6000, 1000)
        self.l2 = nn.Linear(1000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(6000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_6k_5h(nn.Module):
    def __init__(self):
        super(Cnn1_6k_5h, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 6000, 10)
        self.l1 = nn.Linear(6000, 500)
        self.l2 = nn.Linear(500, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(6000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_6k_2h(nn.Module):
    def __init__(self):
        super(Cnn1_6k_2h, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 6000, 10)
        self.l1 = nn.Linear(6000, 200)
        self.l2 = nn.Linear(200, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(6000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_6k_1h(nn.Module):
    def __init__(self):
        super(Cnn1_6k_1h, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 6000, 10)
        self.l1 = nn.Linear(6000, 100)
        self.l2 = nn.Linear(100, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(6000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_6k_10(nn.Module):
    def __init__(self):
        super(Cnn1_6k_10, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 6000, 10)
        self.l1 = nn.Linear(6000, 10)
        self.l2 = nn.Linear(10, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(6000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_5k_6k(nn.Module):
    def __init__(self):
        super(Cnn1_5k_6k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 5000, 10)
        self.l1 = nn.Linear(5000, 6000)
        self.l2 = nn.Linear(6000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(5000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_5k_5k(nn.Module):
    def __init__(self):
        super(Cnn1_5k_5k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 5000, 10)
        self.l1 = nn.Linear(5000, 5000)
        self.l2 = nn.Linear(5000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(5000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_5k_4k(nn.Module):
    def __init__(self):
        super(Cnn1_5k_4k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 5000, 10)
        self.l1 = nn.Linear(5000, 4000)
        self.l2 = nn.Linear(4000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(5000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_5k_3k(nn.Module):
    def __init__(self):
        super(Cnn1_5k_3k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 5000, 10)
        self.l1 = nn.Linear(5000, 3000)
        self.l2 = nn.Linear(3000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(5000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_5k_2k(nn.Module):
    def __init__(self):
        super(Cnn1_5k_2k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 5000, 10)
        self.l1 = nn.Linear(5000, 2000)
        self.l2 = nn.Linear(2000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(5000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_5k_1k(nn.Module):
    def __init__(self):
        super(Cnn1_5k_1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 5000, 10)
        self.l1 = nn.Linear(5000, 1000)
        self.l2 = nn.Linear(1000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(5000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_5k_5h(nn.Module):
    def __init__(self):
        super(Cnn1_5k_5h, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 5000, 10)
        self.l1 = nn.Linear(5000, 500)
        self.l2 = nn.Linear(500, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(5000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_5k_2h(nn.Module):
    def __init__(self):
        super(Cnn1_5k_2h, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 5000, 10)
        self.l1 = nn.Linear(5000, 200)
        self.l2 = nn.Linear(200, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(5000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_5k_1h(nn.Module):
    def __init__(self):
        super(Cnn1_5k_1h, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 5000, 10)
        self.l1 = nn.Linear(5000, 100)
        self.l2 = nn.Linear(100, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(5000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_5k_10(nn.Module):
    def __init__(self):
        super(Cnn1_5k_10, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 5000, 10)
        self.l1 = nn.Linear(5000, 10)
        self.l2 = nn.Linear(10, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(5000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_4k_6k(nn.Module):
    def __init__(self):
        super(Cnn1_4k_6k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 4000, 10)
        self.l1 = nn.Linear(4000, 6000)
        self.l2 = nn.Linear(6000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(4000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_4k_5k(nn.Module):
    def __init__(self):
        super(Cnn1_4k_5k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 4000, 10)
        self.l1 = nn.Linear(4000, 5000)
        self.l2 = nn.Linear(5000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(4000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_4k_4k(nn.Module):
    def __init__(self):
        super(Cnn1_4k_4k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 4000, 10)
        self.l1 = nn.Linear(4000, 4000)
        self.l2 = nn.Linear(4000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(4000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_4k_3k(nn.Module):
    def __init__(self):
        super(Cnn1_4k_3k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 4000, 10)
        self.l1 = nn.Linear(4000, 3000)
        self.l2 = nn.Linear(3000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(4000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_4k_2k(nn.Module):
    def __init__(self):
        super(Cnn1_4k_2k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 4000, 10)
        self.l1 = nn.Linear(4000, 2000)
        self.l2 = nn.Linear(2000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(4000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_4k_1k(nn.Module):
    def __init__(self):
        super(Cnn1_4k_1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 4000, 10)
        self.l1 = nn.Linear(4000, 1000)
        self.l2 = nn.Linear(1000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(4000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_4k_5h(nn.Module):
    def __init__(self):
        super(Cnn1_4k_5h, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 4000, 10)
        self.l1 = nn.Linear(4000, 500)
        self.l2 = nn.Linear(500, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(4000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_4k_2h(nn.Module):
    def __init__(self):
        super(Cnn1_4k_2h, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 4000, 10)
        self.l1 = nn.Linear(4000, 200)
        self.l2 = nn.Linear(200, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(4000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_4k_1h(nn.Module):
    def __init__(self):
        super(Cnn1_4k_1h, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 4000, 10)
        self.l1 = nn.Linear(4000, 100)
        self.l2 = nn.Linear(100, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(4000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_4k_10(nn.Module):
    def __init__(self):
        super(Cnn1_4k_10, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 4000, 10)
        self.l1 = nn.Linear(4000, 10)
        self.l2 = nn.Linear(10, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(4000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_3k_6k(nn.Module):
    def __init__(self):
        super(Cnn1_3k_6k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 3000, 10)
        self.l1 = nn.Linear(3000, 6000)
        self.l2 = nn.Linear(6000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(3000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_3k_5k(nn.Module):
    def __init__(self):
        super(Cnn1_3k_5k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 3000, 10)
        self.l1 = nn.Linear(3000, 5000)
        self.l2 = nn.Linear(5000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(3000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_3k_4k(nn.Module):
    def __init__(self):
        super(Cnn1_3k_4k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 3000, 10)
        self.l1 = nn.Linear(3000, 4000)
        self.l2 = nn.Linear(4000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(3000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_3k_3k(nn.Module):
    def __init__(self):
        super(Cnn1_3k_3k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 3000, 10)
        self.l1 = nn.Linear(3000, 3000)
        self.l2 = nn.Linear(3000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(3000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_3k_2k(nn.Module):
    def __init__(self):
        super(Cnn1_3k_2k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 3000, 10)
        self.l1 = nn.Linear(3000, 2000)
        self.l2 = nn.Linear(2000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(3000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_3k_1k(nn.Module):
    def __init__(self):
        super(Cnn1_3k_1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 3000, 10)
        self.l1 = nn.Linear(3000, 1000)
        self.l2 = nn.Linear(1000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(3000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_3k_5h(nn.Module):
    def __init__(self):
        super(Cnn1_3k_5h, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 3000, 10)
        self.l1 = nn.Linear(3000, 500)
        self.l2 = nn.Linear(500, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(3000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_3k_2h(nn.Module):
    def __init__(self):
        super(Cnn1_3k_2h, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 3000, 10)
        self.l1 = nn.Linear(3000, 200)
        self.l2 = nn.Linear(200, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(3000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_3k_1h(nn.Module):
    def __init__(self):
        super(Cnn1_3k_1h, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 3000, 10)
        self.l1 = nn.Linear(3000, 100)
        self.l2 = nn.Linear(100, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(3000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_3k_10(nn.Module):
    def __init__(self):
        super(Cnn1_3k_10, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 3000, 10)
        self.l1 = nn.Linear(3000, 10)
        self.l2 = nn.Linear(10, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(3000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_2k_6k(nn.Module):
    def __init__(self):
        super(Cnn1_2k_6k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 2000, 10)
        self.l1 = nn.Linear(2000, 6000)
        self.l2 = nn.Linear(6000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(2000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_2k_5k(nn.Module):
    def __init__(self):
        super(Cnn1_2k_5k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 2000, 10)
        self.l1 = nn.Linear(2000, 5000)
        self.l2 = nn.Linear(5000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(2000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_2k_4k(nn.Module):
    def __init__(self):
        super(Cnn1_2k_4k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 2000, 10)
        self.l1 = nn.Linear(2000, 4000)
        self.l2 = nn.Linear(4000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(2000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_2k_3k(nn.Module):
    def __init__(self):
        super(Cnn1_2k_3k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 2000, 10)
        self.l1 = nn.Linear(2000, 3000)
        self.l2 = nn.Linear(3000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(2000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_2k_2k(nn.Module):
    def __init__(self):
        super(Cnn1_2k_2k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 2000, 10)
        self.l1 = nn.Linear(2000, 2000)
        self.l2 = nn.Linear(2000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(2000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_2k_1k(nn.Module):
    def __init__(self):
        super(Cnn1_2k_1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 2000, 10)
        self.l1 = nn.Linear(2000, 1000)
        self.l2 = nn.Linear(1000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(2000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_2k_5h(nn.Module):
    def __init__(self):
        super(Cnn1_2k_5h, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 2000, 10)
        self.l1 = nn.Linear(2000, 500)
        self.l2 = nn.Linear(500, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(2000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_2k_2h(nn.Module):
    def __init__(self):
        super(Cnn1_2k_2h, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 2000, 10)
        self.l1 = nn.Linear(2000, 200)
        self.l2 = nn.Linear(200, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(2000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_2k_1h(nn.Module):
    def __init__(self):
        super(Cnn1_2k_1h, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 2000, 10)
        self.l1 = nn.Linear(2000, 100)
        self.l2 = nn.Linear(100, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(2000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_2k_10(nn.Module):
    def __init__(self):
        super(Cnn1_2k_10, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv3 = nn.Conv1d(500, 1000, 2, stride=2)
        self.conv4 = nn.Conv1d(1000, 2000, 10)
        self.l1 = nn.Linear(2000, 10)
        self.l2 = nn.Linear(10, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(500)
        self.bn3 = nn.BatchNorm1d(1000)
        self.bn4 = nn.BatchNorm1d(2000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_1k_6k(nn.Module):
    def __init__(self):
        super(Cnn1_1k_6k, self).__init__()

        self.conv1 = nn.Conv1d(1, 50, 2, stride=2)
        self.conv2 = nn.Conv1d(50, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv4 = nn.Conv1d(500, 1000, 10)
        self.l1 = nn.Linear(1000, 6000)
        self.l2 = nn.Linear(6000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(50)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(1000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_1k_5k(nn.Module):
    def __init__(self):
        super(Cnn1_1k_5k, self).__init__()

        self.conv1 = nn.Conv1d(1, 50, 2, stride=2)
        self.conv2 = nn.Conv1d(50, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv4 = nn.Conv1d(500, 1000, 10)
        self.l1 = nn.Linear(1000, 5000)
        self.l2 = nn.Linear(5000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(50)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(1000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_1k_4k(nn.Module):
    def __init__(self):
        super(Cnn1_1k_4k, self).__init__()

        self.conv1 = nn.Conv1d(1, 50, 2, stride=2)
        self.conv2 = nn.Conv1d(50, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv4 = nn.Conv1d(500, 1000, 10)
        self.l1 = nn.Linear(1000, 4000)
        self.l2 = nn.Linear(4000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(50)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(1000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_1k_3k(nn.Module):
    def __init__(self):
        super(Cnn1_1k_3k, self).__init__()

        self.conv1 = nn.Conv1d(1, 50, 2, stride=2)
        self.conv2 = nn.Conv1d(50, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv4 = nn.Conv1d(500, 1000, 10)
        self.l1 = nn.Linear(1000, 3000)
        self.l2 = nn.Linear(3000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(50)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(1000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_1k_2k(nn.Module):
    def __init__(self):
        super(Cnn1_1k_2k, self).__init__()

        self.conv1 = nn.Conv1d(1, 50, 2, stride=2)
        self.conv2 = nn.Conv1d(50, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv4 = nn.Conv1d(500, 1000, 10)
        self.l1 = nn.Linear(1000, 2000)
        self.l2 = nn.Linear(2000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(50)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(1000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_1k_1k(nn.Module):
    def __init__(self):
        super(Cnn1_1k_1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 50, 2, stride=2)
        self.conv2 = nn.Conv1d(50, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv4 = nn.Conv1d(500, 1000, 10)
        self.l1 = nn.Linear(1000, 1000)
        self.l2 = nn.Linear(1000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(50)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(1000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_1k_5h(nn.Module):
    def __init__(self):
        super(Cnn1_1k_5h, self).__init__()

        self.conv1 = nn.Conv1d(1, 50, 2, stride=2)
        self.conv2 = nn.Conv1d(50, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv4 = nn.Conv1d(500, 1000, 10)
        self.l1 = nn.Linear(1000, 500)
        self.l2 = nn.Linear(500, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(50)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(1000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_1k_2h(nn.Module):
    def __init__(self):
        super(Cnn1_1k_2h, self).__init__()

        self.conv1 = nn.Conv1d(1, 50, 2, stride=2)
        self.conv2 = nn.Conv1d(50, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv4 = nn.Conv1d(500, 1000, 10)
        self.l1 = nn.Linear(1000, 200)
        self.l2 = nn.Linear(200, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(50)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(1000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_1k_1h(nn.Module):
    def __init__(self):
        super(Cnn1_1k_1h, self).__init__()

        self.conv1 = nn.Conv1d(1, 50, 2, stride=2)
        self.conv2 = nn.Conv1d(50, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv4 = nn.Conv1d(500, 1000, 10)
        self.l1 = nn.Linear(1000, 100)
        self.l2 = nn.Linear(100, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(50)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(1000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_1k_10(nn.Module):
    def __init__(self):
        super(Cnn1_1k_10, self).__init__()

        self.conv1 = nn.Conv1d(1, 50, 2, stride=2)
        self.conv2 = nn.Conv1d(50, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv4 = nn.Conv1d(500, 1000, 10)
        self.l1 = nn.Linear(1000, 10)
        self.l2 = nn.Linear(10, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(50)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(1000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_5h_6k(nn.Module):
    def __init__(self):
        super(Cnn1_5h_6k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 200, 2, stride=2)
        self.conv4 = nn.Conv1d(200, 500, 10)
        self.l1 = nn.Linear(500, 6000)
        self.l2 = nn.Linear(6000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(200)
        self.bn4 = nn.BatchNorm1d(500)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_5h_5k(nn.Module):
    def __init__(self):
        super(Cnn1_5h_5k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 200, 2, stride=2)
        self.conv4 = nn.Conv1d(200, 500, 10)
        self.l1 = nn.Linear(500, 5000)
        self.l2 = nn.Linear(5000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(200)
        self.bn4 = nn.BatchNorm1d(500)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_5h_4k(nn.Module):
    def __init__(self):
        super(Cnn1_5h_4k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 200, 2, stride=2)
        self.conv4 = nn.Conv1d(200, 500, 10)
        self.l1 = nn.Linear(500, 4000)
        self.l2 = nn.Linear(4000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(200)
        self.bn4 = nn.BatchNorm1d(500)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_5h_3k(nn.Module):
    def __init__(self):
        super(Cnn1_5h_3k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 200, 2, stride=2)
        self.conv4 = nn.Conv1d(200, 500, 10)
        self.l1 = nn.Linear(500, 3000)
        self.l2 = nn.Linear(3000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(200)
        self.bn4 = nn.BatchNorm1d(500)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_5h_2k(nn.Module):
    def __init__(self):
        super(Cnn1_5h_2k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 200, 2, stride=2)
        self.conv4 = nn.Conv1d(200, 500, 10)
        self.l1 = nn.Linear(500, 2000)
        self.l2 = nn.Linear(2000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(200)
        self.bn4 = nn.BatchNorm1d(500)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_5h_1k(nn.Module):
    def __init__(self):
        super(Cnn1_5h_1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 200, 2, stride=2)
        self.conv4 = nn.Conv1d(200, 500, 10)
        self.l1 = nn.Linear(500, 1000)
        self.l2 = nn.Linear(1000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(200)
        self.bn4 = nn.BatchNorm1d(500)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_5h_5h(nn.Module):
    def __init__(self):
        super(Cnn1_5h_5h, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 200, 2, stride=2)
        self.conv4 = nn.Conv1d(200, 500, 10)
        self.l1 = nn.Linear(500, 500)
        self.l2 = nn.Linear(500, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(200)
        self.bn4 = nn.BatchNorm1d(500)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_5h_2h(nn.Module):
    def __init__(self):
        super(Cnn1_5h_2h, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 200, 2, stride=2)
        self.conv4 = nn.Conv1d(200, 500, 10)
        self.l1 = nn.Linear(500, 200)
        self.l2 = nn.Linear(200, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(200)
        self.bn4 = nn.BatchNorm1d(500)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_5h_1h(nn.Module):
    def __init__(self):
        super(Cnn1_5h_1h, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 200, 2, stride=2)
        self.conv4 = nn.Conv1d(200, 500, 10)
        self.l1 = nn.Linear(500, 100)
        self.l2 = nn.Linear(100, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(200)
        self.bn4 = nn.BatchNorm1d(500)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_5h_10(nn.Module):
    def __init__(self):
        super(Cnn1_5h_10, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 200, 2, stride=2)
        self.conv4 = nn.Conv1d(200, 500, 10)
        self.l1 = nn.Linear(500, 10)
        self.l2 = nn.Linear(10, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(200)
        self.bn4 = nn.BatchNorm1d(500)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_2h_6k(nn.Module):
    def __init__(self):
        super(Cnn1_2h_6k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 50, 2, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 2, stride=2)
        self.conv4 = nn.Conv1d(100, 200, 10)
        self.l1 = nn.Linear(200, 6000)
        self.l2 = nn.Linear(6000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(200)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_2h_5k(nn.Module):
    def __init__(self):
        super(Cnn1_2h_5k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 50, 2, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 2, stride=2)
        self.conv4 = nn.Conv1d(100, 200, 10)
        self.l1 = nn.Linear(200, 5000)
        self.l2 = nn.Linear(5000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(200)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_2h_4k(nn.Module):
    def __init__(self):
        super(Cnn1_2h_4k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 50, 2, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 2, stride=2)
        self.conv4 = nn.Conv1d(100, 200, 10)
        self.l1 = nn.Linear(200, 4000)
        self.l2 = nn.Linear(4000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(200)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_2h_3k(nn.Module):
    def __init__(self):
        super(Cnn1_2h_3k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 50, 2, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 2, stride=2)
        self.conv4 = nn.Conv1d(100, 200, 10)
        self.l1 = nn.Linear(200, 3000)
        self.l2 = nn.Linear(3000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(200)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_2h_2k(nn.Module):
    def __init__(self):
        super(Cnn1_2h_2k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 50, 2, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 2, stride=2)
        self.conv4 = nn.Conv1d(100, 200, 10)
        self.l1 = nn.Linear(200, 2000)
        self.l2 = nn.Linear(2000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(200)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_2h_1k(nn.Module):
    def __init__(self):
        super(Cnn1_2h_1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 50, 2, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 2, stride=2)
        self.conv4 = nn.Conv1d(100, 200, 10)
        self.l1 = nn.Linear(200, 1000)
        self.l2 = nn.Linear(1000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(200)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_2h_5h(nn.Module):
    def __init__(self):
        super(Cnn1_2h_5h, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 50, 2, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 2, stride=2)
        self.conv4 = nn.Conv1d(100, 200, 10)
        self.l1 = nn.Linear(200, 500)
        self.l2 = nn.Linear(500, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(200)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_2h_2h(nn.Module):
    def __init__(self):
        super(Cnn1_2h_2h, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 50, 2, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 2, stride=2)
        self.conv4 = nn.Conv1d(100, 200, 10)
        self.l1 = nn.Linear(200, 200)
        self.l2 = nn.Linear(200, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(200)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_2h_1h(nn.Module):
    def __init__(self):
        super(Cnn1_2h_1h, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 50, 2, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 2, stride=2)
        self.conv4 = nn.Conv1d(100, 200, 10)
        self.l1 = nn.Linear(200, 100)
        self.l2 = nn.Linear(100, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(200)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_2h_10(nn.Module):
    def __init__(self):
        super(Cnn1_2h_10, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 50, 2, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 2, stride=2)
        self.conv4 = nn.Conv1d(100, 200, 10)
        self.l1 = nn.Linear(200, 200)
        self.l2 = nn.Linear(200, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(200)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_1h_6k(nn.Module):
    def __init__(self):
        super(Cnn1_1h_6k, self).__init__()

        self.conv1 = nn.Conv1d(1, 5, 2, stride=2)
        self.conv2 = nn.Conv1d(5, 10, 2, stride=2)
        self.conv3 = nn.Conv1d(10, 50, 2, stride=2)
        self.conv4 = nn.Conv1d(50, 100, 10)
        self.l1 = nn.Linear(100, 6000)
        self.l2 = nn.Linear(6000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(5)
        self.bn2 = nn.BatchNorm1d(10)
        self.bn3 = nn.BatchNorm1d(50)
        self.bn4 = nn.BatchNorm1d(100)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_1h_5k(nn.Module):
    def __init__(self):
        super(Cnn1_1h_5k, self).__init__()

        self.conv1 = nn.Conv1d(1, 5, 2, stride=2)
        self.conv2 = nn.Conv1d(5, 10, 2, stride=2)
        self.conv3 = nn.Conv1d(10, 50, 2, stride=2)
        self.conv4 = nn.Conv1d(50, 100, 10)
        self.l1 = nn.Linear(100, 5000)
        self.l2 = nn.Linear(5000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(5)
        self.bn2 = nn.BatchNorm1d(10)
        self.bn3 = nn.BatchNorm1d(50)
        self.bn4 = nn.BatchNorm1d(100)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_1h_4k(nn.Module):
    def __init__(self):
        super(Cnn1_1h_4k, self).__init__()

        self.conv1 = nn.Conv1d(1, 5, 2, stride=2)
        self.conv2 = nn.Conv1d(5, 10, 2, stride=2)
        self.conv3 = nn.Conv1d(10, 50, 2, stride=2)
        self.conv4 = nn.Conv1d(50, 100, 10)
        self.l1 = nn.Linear(100, 4000)
        self.l2 = nn.Linear(4000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(5)
        self.bn2 = nn.BatchNorm1d(10)
        self.bn3 = nn.BatchNorm1d(50)
        self.bn4 = nn.BatchNorm1d(100)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_1h_3k(nn.Module):
    def __init__(self):
        super(Cnn1_1h_3k, self).__init__()

        self.conv1 = nn.Conv1d(1, 5, 2, stride=2)
        self.conv2 = nn.Conv1d(5, 10, 2, stride=2)
        self.conv3 = nn.Conv1d(10, 50, 2, stride=2)
        self.conv4 = nn.Conv1d(50, 100, 10)
        self.l1 = nn.Linear(100, 3000)
        self.l2 = nn.Linear(3000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(5)
        self.bn2 = nn.BatchNorm1d(10)
        self.bn3 = nn.BatchNorm1d(50)
        self.bn4 = nn.BatchNorm1d(100)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_1h_2k(nn.Module):
    def __init__(self):
        super(Cnn1_1h_2k, self).__init__()

        self.conv1 = nn.Conv1d(1, 5, 2, stride=2)
        self.conv2 = nn.Conv1d(5, 10, 2, stride=2)
        self.conv3 = nn.Conv1d(10, 50, 2, stride=2)
        self.conv4 = nn.Conv1d(50, 100, 10)
        self.l1 = nn.Linear(100, 2000)
        self.l2 = nn.Linear(2000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(5)
        self.bn2 = nn.BatchNorm1d(10)
        self.bn3 = nn.BatchNorm1d(50)
        self.bn4 = nn.BatchNorm1d(100)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_1h_1k(nn.Module):
    def __init__(self):
        super(Cnn1_1h_1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 5, 2, stride=2)
        self.conv2 = nn.Conv1d(5, 10, 2, stride=2)
        self.conv3 = nn.Conv1d(10, 50, 2, stride=2)
        self.conv4 = nn.Conv1d(50, 100, 10)
        self.l1 = nn.Linear(100, 1000)
        self.l2 = nn.Linear(1000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(5)
        self.bn2 = nn.BatchNorm1d(10)
        self.bn3 = nn.BatchNorm1d(50)
        self.bn4 = nn.BatchNorm1d(100)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_1h_5h(nn.Module):
    def __init__(self):
        super(Cnn1_1h_5h, self).__init__()

        self.conv1 = nn.Conv1d(1, 5, 2, stride=2)
        self.conv2 = nn.Conv1d(5, 10, 2, stride=2)
        self.conv3 = nn.Conv1d(10, 50, 2, stride=2)
        self.conv4 = nn.Conv1d(50, 100, 10)
        self.l1 = nn.Linear(100, 500)
        self.l2 = nn.Linear(500, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(5)
        self.bn2 = nn.BatchNorm1d(10)
        self.bn3 = nn.BatchNorm1d(50)
        self.bn4 = nn.BatchNorm1d(100)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_1h_2h(nn.Module):
    def __init__(self):
        super(Cnn1_1h_2h, self).__init__()

        self.conv1 = nn.Conv1d(1, 5, 2, stride=2)
        self.conv2 = nn.Conv1d(5, 10, 2, stride=2)
        self.conv3 = nn.Conv1d(10, 50, 2, stride=2)
        self.conv4 = nn.Conv1d(50, 100, 10)
        self.l1 = nn.Linear(100, 200)
        self.l2 = nn.Linear(200, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(5)
        self.bn2 = nn.BatchNorm1d(10)
        self.bn3 = nn.BatchNorm1d(50)
        self.bn4 = nn.BatchNorm1d(100)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_1h_1h(nn.Module):
    def __init__(self):
        super(Cnn1_1h_1h, self).__init__()

        self.conv1 = nn.Conv1d(1, 5, 2, stride=2)
        self.conv2 = nn.Conv1d(5, 10, 2, stride=2)
        self.conv3 = nn.Conv1d(10, 50, 2, stride=2)
        self.conv4 = nn.Conv1d(50, 100, 10)
        self.l1 = nn.Linear(100, 100)
        self.l2 = nn.Linear(100, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(5)
        self.bn2 = nn.BatchNorm1d(10)
        self.bn3 = nn.BatchNorm1d(50)
        self.bn4 = nn.BatchNorm1d(100)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_1h_10(nn.Module):
    def __init__(self):
        super(Cnn1_1h_10, self).__init__()

        self.conv1 = nn.Conv1d(1, 5, 2, stride=2)
        self.conv2 = nn.Conv1d(5, 10, 2, stride=2)
        self.conv3 = nn.Conv1d(10, 50, 2, stride=2)
        self.conv4 = nn.Conv1d(50, 100, 10)
        self.l1 = nn.Linear(100, 10)
        self.l2 = nn.Linear(10, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(5)
        self.bn2 = nn.BatchNorm1d(10)
        self.bn3 = nn.BatchNorm1d(50)
        self.bn4 = nn.BatchNorm1d(100)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_10_6k(nn.Module):
    def __init__(self):
        super(Cnn1_10_6k, self).__init__()

        self.conv1 = nn.Conv1d(1, 2, 2, stride=2)
        self.conv2 = nn.Conv1d(2, 5, 2, stride=2)
        self.conv3 = nn.Conv1d(5, 10, 2, stride=2)
        self.conv4 = nn.Conv1d(10, 10, 10)
        self.l1 = nn.Linear(10, 6000)
        self.l2 = nn.Linear(6000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(2)
        self.bn2 = nn.BatchNorm1d(5)
        self.bn3 = nn.BatchNorm1d(10)
        self.bn4 = nn.BatchNorm1d(10)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_10_5k(nn.Module):
    def __init__(self):
        super(Cnn1_10_5k, self).__init__()

        self.conv1 = nn.Conv1d(1, 2, 2, stride=2)
        self.conv2 = nn.Conv1d(2, 5, 2, stride=2)
        self.conv3 = nn.Conv1d(5, 10, 2, stride=2)
        self.conv4 = nn.Conv1d(10, 10, 10)
        self.l1 = nn.Linear(10, 5000)
        self.l2 = nn.Linear(5000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(2)
        self.bn2 = nn.BatchNorm1d(5)
        self.bn3 = nn.BatchNorm1d(10)
        self.bn4 = nn.BatchNorm1d(10)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_10_4k(nn.Module):
    def __init__(self):
        super(Cnn1_10_4k, self).__init__()

        self.conv1 = nn.Conv1d(1, 2, 2, stride=2)
        self.conv2 = nn.Conv1d(2, 5, 2, stride=2)
        self.conv3 = nn.Conv1d(5, 10, 2, stride=2)
        self.conv4 = nn.Conv1d(10, 10, 10)
        self.l1 = nn.Linear(10, 4000)
        self.l2 = nn.Linear(4000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(2)
        self.bn2 = nn.BatchNorm1d(5)
        self.bn3 = nn.BatchNorm1d(10)
        self.bn4 = nn.BatchNorm1d(10)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_10_3k(nn.Module):
    def __init__(self):
        super(Cnn1_10_3k, self).__init__()

        self.conv1 = nn.Conv1d(1, 2, 2, stride=2)
        self.conv2 = nn.Conv1d(2, 5, 2, stride=2)
        self.conv3 = nn.Conv1d(5, 10, 2, stride=2)
        self.conv4 = nn.Conv1d(10, 10, 10)
        self.l1 = nn.Linear(10, 3000)
        self.l2 = nn.Linear(3000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(2)
        self.bn2 = nn.BatchNorm1d(5)
        self.bn3 = nn.BatchNorm1d(10)
        self.bn4 = nn.BatchNorm1d(10)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_10_2k(nn.Module):
    def __init__(self):
        super(Cnn1_10_2k, self).__init__()

        self.conv1 = nn.Conv1d(1, 2, 2, stride=2)
        self.conv2 = nn.Conv1d(2, 5, 2, stride=2)
        self.conv3 = nn.Conv1d(5, 10, 2, stride=2)
        self.conv4 = nn.Conv1d(10, 10, 10)
        self.l1 = nn.Linear(10, 2000)
        self.l2 = nn.Linear(2000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(2)
        self.bn2 = nn.BatchNorm1d(5)
        self.bn3 = nn.BatchNorm1d(10)
        self.bn4 = nn.BatchNorm1d(10)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_10_1k(nn.Module):
    def __init__(self):
        super(Cnn1_10_1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 2, 2, stride=2)
        self.conv2 = nn.Conv1d(2, 5, 2, stride=2)
        self.conv3 = nn.Conv1d(5, 10, 2, stride=2)
        self.conv4 = nn.Conv1d(10, 10, 10)
        self.l1 = nn.Linear(10, 1000)
        self.l2 = nn.Linear(1000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(2)
        self.bn2 = nn.BatchNorm1d(5)
        self.bn3 = nn.BatchNorm1d(10)
        self.bn4 = nn.BatchNorm1d(10)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_10_5h(nn.Module):
    def __init__(self):
        super(Cnn1_10_5h, self).__init__()

        self.conv1 = nn.Conv1d(1, 2, 2, stride=2)
        self.conv2 = nn.Conv1d(2, 5, 2, stride=2)
        self.conv3 = nn.Conv1d(5, 10, 2, stride=2)
        self.conv4 = nn.Conv1d(10, 10, 10)
        self.l1 = nn.Linear(10, 500)
        self.l2 = nn.Linear(500, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(2)
        self.bn2 = nn.BatchNorm1d(5)
        self.bn3 = nn.BatchNorm1d(10)
        self.bn4 = nn.BatchNorm1d(10)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_10_2h(nn.Module):
    def __init__(self):
        super(Cnn1_10_2h, self).__init__()

        self.conv1 = nn.Conv1d(1, 2, 2, stride=2)
        self.conv2 = nn.Conv1d(2, 5, 2, stride=2)
        self.conv3 = nn.Conv1d(5, 10, 2, stride=2)
        self.conv4 = nn.Conv1d(10, 10, 10)
        self.l1 = nn.Linear(10, 200)
        self.l2 = nn.Linear(200, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(2)
        self.bn2 = nn.BatchNorm1d(5)
        self.bn3 = nn.BatchNorm1d(10)
        self.bn4 = nn.BatchNorm1d(10)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_10_1h(nn.Module):
    def __init__(self):
        super(Cnn1_10_1h, self).__init__()

        self.conv1 = nn.Conv1d(1, 2, 2, stride=2)
        self.conv2 = nn.Conv1d(2, 5, 2, stride=2)
        self.conv3 = nn.Conv1d(5, 10, 2, stride=2)
        self.conv4 = nn.Conv1d(10, 10, 10)
        self.l1 = nn.Linear(10, 100)
        self.l2 = nn.Linear(100, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(2)
        self.bn2 = nn.BatchNorm1d(5)
        self.bn3 = nn.BatchNorm1d(10)
        self.bn4 = nn.BatchNorm1d(10)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn1_10_10(nn.Module):
    def __init__(self):
        super(Cnn1_10_10, self).__init__()

        self.conv1 = nn.Conv1d(1, 2, 2, stride=2)
        self.conv2 = nn.Conv1d(2, 5, 2, stride=2)
        self.conv3 = nn.Conv1d(5, 10, 2, stride=2)
        self.conv4 = nn.Conv1d(10, 10, 10)
        self.l1 = nn.Linear(10, 10)
        self.l2 = nn.Linear(10, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(2)
        self.bn2 = nn.BatchNorm1d(5)
        self.bn3 = nn.BatchNorm1d(10)
        self.bn4 = nn.BatchNorm1d(10)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


# CNN tipo 2 con una capa lineal


class Cnn2_6k(nn.Module):
    def __init__(self):
        super(Cnn2_6k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 6000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(6000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(6000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = self.l1(wave)
        return self.sigmoid(wave)


class Cnn2_5k(nn.Module):
    def __init__(self):
        super(Cnn2_5k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 5000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(5000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(5000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = self.l1(wave)
        return self.sigmoid(wave)


class Cnn2_4k(nn.Module):
    def __init__(self):
        super(Cnn2_4k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 4000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(4000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(4000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = self.l1(wave)
        return self.sigmoid(wave)


class Cnn2_3k(nn.Module):
    def __init__(self):
        super(Cnn2_3k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 100, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(100, 200, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(200, 300, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(300, 500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(1500, 3000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(3000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(200)
        self.bn4 = nn.BatchNorm1d(300)
        self.bn5 = nn.BatchNorm1d(500)
        self.bn6 = nn.BatchNorm1d(1000)
        self.bn7 = nn.BatchNorm1d(1500)
        self.bn8 = nn.BatchNorm1d(3000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = self.l1(wave)
        return self.sigmoid(wave)


class Cnn2_2k(nn.Module):
    def __init__(self):
        super(Cnn2_2k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 300, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(300, 500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(1500, 2000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(2000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(300)
        self.bn5 = nn.BatchNorm1d(500)
        self.bn6 = nn.BatchNorm1d(1000)
        self.bn7 = nn.BatchNorm1d(1500)
        self.bn8 = nn.BatchNorm1d(2000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = self.l1(wave)
        return self.sigmoid(wave)


class Cnn2_1k(nn.Module):
    def __init__(self):
        super(Cnn2_1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(500, 800, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(800, 1000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(1000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(200)
        self.bn5 = nn.BatchNorm1d(300)
        self.bn6 = nn.BatchNorm1d(500)
        self.bn7 = nn.BatchNorm1d(800)
        self.bn8 = nn.BatchNorm1d(1000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = self.l1(wave)
        return self.sigmoid(wave)


class Cnn2_5h(nn.Module):
    def __init__(self):
        super(Cnn2_5h, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(300, 400, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(400, 500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(500, 500, 3, padding=1, stride=2)
        self.l1 = nn.Linear(500, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(200)
        self.bn5 = nn.BatchNorm1d(300)
        self.bn6 = nn.BatchNorm1d(400)
        self.bn7 = nn.BatchNorm1d(500)
        self.bn8 = nn.BatchNorm1d(500)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = self.l1(wave)
        return self.sigmoid(wave)


class Cnn2_2h(nn.Module):
    def __init__(self):
        super(Cnn2_2h, self).__init__()

        self.conv1 = nn.Conv1d(1, 5, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(5, 10, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(10, 20, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(20, 50, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(50, 80, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(80, 100, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(100, 150, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(150, 200, 3, padding=1, stride=2)
        self.l1 = nn.Linear(200, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(5)
        self.bn2 = nn.BatchNorm1d(10)
        self.bn3 = nn.BatchNorm1d(20)
        self.bn4 = nn.BatchNorm1d(50)
        self.bn5 = nn.BatchNorm1d(80)
        self.bn6 = nn.BatchNorm1d(100)
        self.bn7 = nn.BatchNorm1d(150)
        self.bn8 = nn.BatchNorm1d(200)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = self.l1(wave)
        return self.sigmoid(wave)


class Cnn2_1h(nn.Module):
    def __init__(self):
        super(Cnn2_1h, self).__init__()

        self.conv1 = nn.Conv1d(1, 5, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(5, 10, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(10, 20, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(20, 30, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(30, 40, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(40, 50, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(50, 80, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(80, 100, 3, padding=1, stride=2)
        self.l1 = nn.Linear(100, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(5)
        self.bn2 = nn.BatchNorm1d(10)
        self.bn3 = nn.BatchNorm1d(20)
        self.bn4 = nn.BatchNorm1d(30)
        self.bn5 = nn.BatchNorm1d(40)
        self.bn6 = nn.BatchNorm1d(50)
        self.bn7 = nn.BatchNorm1d(80)
        self.bn8 = nn.BatchNorm1d(100)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = self.l1(wave)
        return self.sigmoid(wave)


class Cnn2_10(nn.Module):
    def __init__(self):
        super(Cnn2_10, self).__init__()

        self.conv1 = nn.Conv1d(1, 2, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(2, 3, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(3, 4, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(4, 5, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(5, 6, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(6, 7, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(7, 8, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(8, 10, 3, padding=1, stride=2)
        self.l1 = nn.Linear(10, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(2)
        self.bn2 = nn.BatchNorm1d(3)
        self.bn3 = nn.BatchNorm1d(4)
        self.bn4 = nn.BatchNorm1d(5)
        self.bn5 = nn.BatchNorm1d(6)
        self.bn6 = nn.BatchNorm1d(7)
        self.bn7 = nn.BatchNorm1d(8)
        self.bn8 = nn.BatchNorm1d(10)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = self.l1(wave)
        return self.sigmoid(wave)


# CNN tipo 2 con dos capas lineales


class Cnn2_6k_6k(nn.Module):
    def __init__(self):
        super(Cnn2_6k_6k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 6000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(6000, 6000)
        self.l2 = nn.Linear(6000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(6000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_6k_5k(nn.Module):
    def __init__(self):
        super(Cnn2_6k_5k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 6000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(6000, 5000)
        self.l2 = nn.Linear(5000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(6000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_6k_4k(nn.Module):
    def __init__(self):
        super(Cnn2_6k_4k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 6000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(6000, 4000)
        self.l2 = nn.Linear(4000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(6000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_6k_3k(nn.Module):
    def __init__(self):
        super(Cnn2_6k_3k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 6000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(6000, 3000)
        self.l2 = nn.Linear(3000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(6000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_6k_2k(nn.Module):
    def __init__(self):
        super(Cnn2_6k_2k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 6000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(6000, 2000)
        self.l2 = nn.Linear(2000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(6000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_6k_1k(nn.Module):
    def __init__(self):
        super(Cnn2_6k_1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 6000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(6000, 1000)
        self.l2 = nn.Linear(1000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(6000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_6k_5h(nn.Module):
    def __init__(self):
        super(Cnn2_6k_5h, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 6000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(6000, 500)
        self.l2 = nn.Linear(500, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(6000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_6k_2h(nn.Module):
    def __init__(self):
        super(Cnn2_6k_2h, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 6000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(6000, 200)
        self.l2 = nn.Linear(200, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(6000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_6k_1h(nn.Module):
    def __init__(self):
        super(Cnn2_6k_1h, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 6000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(6000, 100)
        self.l2 = nn.Linear(100, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(6000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_6k_10(nn.Module):
    def __init__(self):
        super(Cnn2_6k_10, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 6000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(6000, 10)
        self.l2 = nn.Linear(10, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(6000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_5k_6k(nn.Module):
    def __init__(self):
        super(Cnn2_5k_6k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 5000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(5000, 6000)
        self.l2 = nn.Linear(6000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(5000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_5k_5k(nn.Module):
    def __init__(self):
        super(Cnn2_5k_5k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 5000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(5000, 5000)
        self.l2 = nn.Linear(5000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(5000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_5k_4k(nn.Module):
    def __init__(self):
        super(Cnn2_5k_4k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 5000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(5000, 4000)
        self.l2 = nn.Linear(4000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(5000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_5k_3k(nn.Module):
    def __init__(self):
        super(Cnn2_5k_3k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 5000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(5000, 3000)
        self.l2 = nn.Linear(3000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(5000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_5k_2k(nn.Module):
    def __init__(self):
        super(Cnn2_5k_2k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 5000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(5000, 2000)
        self.l2 = nn.Linear(2000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(5000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_5k_1k(nn.Module):
    def __init__(self):
        super(Cnn2_5k_1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 5000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(5000, 1000)
        self.l2 = nn.Linear(1000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(5000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_5k_5h(nn.Module):
    def __init__(self):
        super(Cnn2_5k_5h, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 5000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(5000, 500)
        self.l2 = nn.Linear(500, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(5000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_5k_2h(nn.Module):
    def __init__(self):
        super(Cnn2_5k_2h, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 5000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(5000, 200)
        self.l2 = nn.Linear(200, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(5000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_5k_1h(nn.Module):
    def __init__(self):
        super(Cnn2_5k_1h, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 5000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(5000, 100)
        self.l2 = nn.Linear(100, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(5000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_5k_10(nn.Module):
    def __init__(self):
        super(Cnn2_5k_10, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 5000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(5000, 10)
        self.l2 = nn.Linear(10, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(5000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_4k_6k(nn.Module):
    def __init__(self):
        super(Cnn2_4k_6k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 4000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(4000, 6000)
        self.l2 = nn.Linear(6000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(4000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_4k_5k(nn.Module):
    def __init__(self):
        super(Cnn2_4k_5k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 4000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(4000, 5000)
        self.l2 = nn.Linear(5000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(4000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_4k_4k(nn.Module):
    def __init__(self):
        super(Cnn2_4k_4k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 4000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(4000, 4000)
        self.l2 = nn.Linear(4000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(4000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_4k_3k(nn.Module):
    def __init__(self):
        super(Cnn2_4k_3k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 4000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(4000, 3000)
        self.l2 = nn.Linear(3000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(4000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_4k_2k(nn.Module):
    def __init__(self):
        super(Cnn2_4k_2k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 4000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(4000, 2000)
        self.l2 = nn.Linear(2000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(4000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_4k_1k(nn.Module):
    def __init__(self):
        super(Cnn2_4k_1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 4000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(4000, 1000)
        self.l2 = nn.Linear(1000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(4000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_4k_5h(nn.Module):
    def __init__(self):
        super(Cnn2_4k_5h, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 4000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(4000, 500)
        self.l2 = nn.Linear(500, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(4000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_4k_2h(nn.Module):
    def __init__(self):
        super(Cnn2_4k_2h, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 4000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(4000, 200)
        self.l2 = nn.Linear(200, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(4000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_4k_1h(nn.Module):
    def __init__(self):
        super(Cnn2_4k_1h, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 4000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(4000, 100)
        self.l2 = nn.Linear(100, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(4000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_4k_10(nn.Module):
    def __init__(self):
        super(Cnn2_4k_10, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 4000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(4000, 10)
        self.l2 = nn.Linear(10, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(4000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_3k_6k(nn.Module):
    def __init__(self):
        super(Cnn2_3k_6k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 100, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(100, 200, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(200, 300, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(300, 500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(1500, 3000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(3000, 6000)
        self.l2 = nn.Linear(6000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(200)
        self.bn4 = nn.BatchNorm1d(300)
        self.bn5 = nn.BatchNorm1d(500)
        self.bn6 = nn.BatchNorm1d(1000)
        self.bn7 = nn.BatchNorm1d(1500)
        self.bn8 = nn.BatchNorm1d(3000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_3k_5k(nn.Module):
    def __init__(self):
        super(Cnn2_3k_5k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 100, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(100, 200, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(200, 300, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(300, 500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(1500, 3000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(3000, 5000)
        self.l2 = nn.Linear(5000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(200)
        self.bn4 = nn.BatchNorm1d(300)
        self.bn5 = nn.BatchNorm1d(500)
        self.bn6 = nn.BatchNorm1d(1000)
        self.bn7 = nn.BatchNorm1d(1500)
        self.bn8 = nn.BatchNorm1d(3000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_3k_4k(nn.Module):
    def __init__(self):
        super(Cnn2_3k_4k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 100, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(100, 200, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(200, 300, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(300, 500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(1500, 3000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(3000, 4000)
        self.l2 = nn.Linear(4000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(200)
        self.bn4 = nn.BatchNorm1d(300)
        self.bn5 = nn.BatchNorm1d(500)
        self.bn6 = nn.BatchNorm1d(1000)
        self.bn7 = nn.BatchNorm1d(1500)
        self.bn8 = nn.BatchNorm1d(3000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_3k_3k(nn.Module):
    def __init__(self):
        super(Cnn2_3k_3k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 100, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(100, 200, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(200, 300, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(300, 500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(1500, 3000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(3000, 3000)
        self.l2 = nn.Linear(3000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(200)
        self.bn4 = nn.BatchNorm1d(300)
        self.bn5 = nn.BatchNorm1d(500)
        self.bn6 = nn.BatchNorm1d(1000)
        self.bn7 = nn.BatchNorm1d(1500)
        self.bn8 = nn.BatchNorm1d(3000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_3k_2k(nn.Module):
    def __init__(self):
        super(Cnn2_3k_2k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 100, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(100, 200, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(200, 300, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(300, 500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(1500, 3000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(3000, 2000)
        self.l2 = nn.Linear(2000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(200)
        self.bn4 = nn.BatchNorm1d(300)
        self.bn5 = nn.BatchNorm1d(500)
        self.bn6 = nn.BatchNorm1d(1000)
        self.bn7 = nn.BatchNorm1d(1500)
        self.bn8 = nn.BatchNorm1d(3000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_3k_1k(nn.Module):
    def __init__(self):
        super(Cnn2_3k_1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 100, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(100, 200, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(200, 300, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(300, 500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(1500, 3000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(3000, 1000)
        self.l2 = nn.Linear(1000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(200)
        self.bn4 = nn.BatchNorm1d(300)
        self.bn5 = nn.BatchNorm1d(500)
        self.bn6 = nn.BatchNorm1d(1000)
        self.bn7 = nn.BatchNorm1d(1500)
        self.bn8 = nn.BatchNorm1d(3000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_3k_5h(nn.Module):
    def __init__(self):
        super(Cnn2_3k_5h, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 100, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(100, 200, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(200, 300, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(300, 500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(1500, 3000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(3000, 500)
        self.l2 = nn.Linear(500, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(200)
        self.bn4 = nn.BatchNorm1d(300)
        self.bn5 = nn.BatchNorm1d(500)
        self.bn6 = nn.BatchNorm1d(1000)
        self.bn7 = nn.BatchNorm1d(1500)
        self.bn8 = nn.BatchNorm1d(3000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_3k_2h(nn.Module):
    def __init__(self):
        super(Cnn2_3k_2h, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 100, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(100, 200, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(200, 300, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(300, 500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(1500, 3000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(3000, 200)
        self.l2 = nn.Linear(200, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(200)
        self.bn4 = nn.BatchNorm1d(300)
        self.bn5 = nn.BatchNorm1d(500)
        self.bn6 = nn.BatchNorm1d(1000)
        self.bn7 = nn.BatchNorm1d(1500)
        self.bn8 = nn.BatchNorm1d(3000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_3k_1h(nn.Module):
    def __init__(self):
        super(Cnn2_3k_1h, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 100, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(100, 200, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(200, 300, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(300, 500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(1500, 3000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(3000, 100)
        self.l2 = nn.Linear(100, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(200)
        self.bn4 = nn.BatchNorm1d(300)
        self.bn5 = nn.BatchNorm1d(500)
        self.bn6 = nn.BatchNorm1d(1000)
        self.bn7 = nn.BatchNorm1d(1500)
        self.bn8 = nn.BatchNorm1d(3000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_3k_10(nn.Module):
    def __init__(self):
        super(Cnn2_3k_10, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 100, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(100, 200, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(200, 300, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(300, 500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(1500, 3000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(3000, 10)
        self.l2 = nn.Linear(10, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(200)
        self.bn4 = nn.BatchNorm1d(300)
        self.bn5 = nn.BatchNorm1d(500)
        self.bn6 = nn.BatchNorm1d(1000)
        self.bn7 = nn.BatchNorm1d(1500)
        self.bn8 = nn.BatchNorm1d(3000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_2k_6k(nn.Module):
    def __init__(self):
        super(Cnn2_2k_6k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 300, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(300, 500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(1500, 2000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(2000, 6000)
        self.l2 = nn.Linear(6000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(300)
        self.bn5 = nn.BatchNorm1d(500)
        self.bn6 = nn.BatchNorm1d(1000)
        self.bn7 = nn.BatchNorm1d(1500)
        self.bn8 = nn.BatchNorm1d(2000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_2k_5k(nn.Module):
    def __init__(self):
        super(Cnn2_2k_5k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 300, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(300, 500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(1500, 2000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(2000, 5000)
        self.l2 = nn.Linear(5000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(300)
        self.bn5 = nn.BatchNorm1d(500)
        self.bn6 = nn.BatchNorm1d(1000)
        self.bn7 = nn.BatchNorm1d(1500)
        self.bn8 = nn.BatchNorm1d(2000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_2k_4k(nn.Module):
    def __init__(self):
        super(Cnn2_2k_4k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 300, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(300, 500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(1500, 2000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(2000, 4000)
        self.l2 = nn.Linear(4000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(300)
        self.bn5 = nn.BatchNorm1d(500)
        self.bn6 = nn.BatchNorm1d(1000)
        self.bn7 = nn.BatchNorm1d(1500)
        self.bn8 = nn.BatchNorm1d(2000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_2k_3k(nn.Module):
    def __init__(self):
        super(Cnn2_2k_3k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 300, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(300, 500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(1500, 2000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(2000, 3000)
        self.l2 = nn.Linear(3000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(300)
        self.bn5 = nn.BatchNorm1d(500)
        self.bn6 = nn.BatchNorm1d(1000)
        self.bn7 = nn.BatchNorm1d(1500)
        self.bn8 = nn.BatchNorm1d(2000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_2k_2k(nn.Module):
    def __init__(self):
        super(Cnn2_2k_2k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 300, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(300, 500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(1500, 2000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(2000, 2000)
        self.l2 = nn.Linear(2000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(300)
        self.bn5 = nn.BatchNorm1d(500)
        self.bn6 = nn.BatchNorm1d(1000)
        self.bn7 = nn.BatchNorm1d(1500)
        self.bn8 = nn.BatchNorm1d(2000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_2k_1k(nn.Module):
    def __init__(self):
        super(Cnn2_2k_1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 300, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(300, 500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(1500, 2000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(2000, 1000)
        self.l2 = nn.Linear(1000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(300)
        self.bn5 = nn.BatchNorm1d(500)
        self.bn6 = nn.BatchNorm1d(1000)
        self.bn7 = nn.BatchNorm1d(1500)
        self.bn8 = nn.BatchNorm1d(2000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_2k_5h(nn.Module):
    def __init__(self):
        super(Cnn2_2k_5h, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 300, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(300, 500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(1500, 2000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(2000, 500)
        self.l2 = nn.Linear(500, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(300)
        self.bn5 = nn.BatchNorm1d(500)
        self.bn6 = nn.BatchNorm1d(1000)
        self.bn7 = nn.BatchNorm1d(1500)
        self.bn8 = nn.BatchNorm1d(2000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_2k_2h(nn.Module):
    def __init__(self):
        super(Cnn2_2k_2h, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 300, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(300, 500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(1500, 2000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(2000, 200)
        self.l2 = nn.Linear(200, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(300)
        self.bn5 = nn.BatchNorm1d(500)
        self.bn6 = nn.BatchNorm1d(1000)
        self.bn7 = nn.BatchNorm1d(1500)
        self.bn8 = nn.BatchNorm1d(2000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_2k_1h(nn.Module):
    def __init__(self):
        super(Cnn2_2k_1h, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 300, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(300, 500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(1500, 2000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(2000, 100)
        self.l2 = nn.Linear(100, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(300)
        self.bn5 = nn.BatchNorm1d(500)
        self.bn6 = nn.BatchNorm1d(1000)
        self.bn7 = nn.BatchNorm1d(1500)
        self.bn8 = nn.BatchNorm1d(2000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_2k_10(nn.Module):
    def __init__(self):
        super(Cnn2_2k_10, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 300, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(300, 500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(1500, 2000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(2000, 10)
        self.l2 = nn.Linear(10, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(300)
        self.bn5 = nn.BatchNorm1d(500)
        self.bn6 = nn.BatchNorm1d(1000)
        self.bn7 = nn.BatchNorm1d(1500)
        self.bn8 = nn.BatchNorm1d(2000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_1k_6k(nn.Module):
    def __init__(self):
        super(Cnn2_1k_6k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(500, 800, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(800, 1000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(1000, 6000)
        self.l2 = nn.Linear(6000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(200)
        self.bn5 = nn.BatchNorm1d(300)
        self.bn6 = nn.BatchNorm1d(500)
        self.bn7 = nn.BatchNorm1d(800)
        self.bn8 = nn.BatchNorm1d(1000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_1k_5k(nn.Module):
    def __init__(self):
        super(Cnn2_1k_5k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(500, 800, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(800, 1000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(1000, 5000)
        self.l2 = nn.Linear(5000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(200)
        self.bn5 = nn.BatchNorm1d(300)
        self.bn6 = nn.BatchNorm1d(500)
        self.bn7 = nn.BatchNorm1d(800)
        self.bn8 = nn.BatchNorm1d(1000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_1k_4k(nn.Module):
    def __init__(self):
        super(Cnn2_1k_4k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(500, 800, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(800, 1000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(1000, 4000)
        self.l2 = nn.Linear(4000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(200)
        self.bn5 = nn.BatchNorm1d(300)
        self.bn6 = nn.BatchNorm1d(500)
        self.bn7 = nn.BatchNorm1d(800)
        self.bn8 = nn.BatchNorm1d(1000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_1k_3k(nn.Module):
    def __init__(self):
        super(Cnn2_1k_3k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(500, 800, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(800, 1000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(1000, 3000)
        self.l2 = nn.Linear(3000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(200)
        self.bn5 = nn.BatchNorm1d(300)
        self.bn6 = nn.BatchNorm1d(500)
        self.bn7 = nn.BatchNorm1d(800)
        self.bn8 = nn.BatchNorm1d(1000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_1k_2k(nn.Module):
    def __init__(self):
        super(Cnn2_1k_2k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(500, 800, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(800, 1000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(1000, 2000)
        self.l2 = nn.Linear(2000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(200)
        self.bn5 = nn.BatchNorm1d(300)
        self.bn6 = nn.BatchNorm1d(500)
        self.bn7 = nn.BatchNorm1d(800)
        self.bn8 = nn.BatchNorm1d(1000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_1k_1k(nn.Module):
    def __init__(self):
        super(Cnn2_1k_1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(500, 800, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(800, 1000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(1000, 1000)
        self.l2 = nn.Linear(1000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(200)
        self.bn5 = nn.BatchNorm1d(300)
        self.bn6 = nn.BatchNorm1d(500)
        self.bn7 = nn.BatchNorm1d(800)
        self.bn8 = nn.BatchNorm1d(1000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_1k_5h(nn.Module):
    def __init__(self):
        super(Cnn2_1k_5h, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(500, 800, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(800, 1000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(1000, 500)
        self.l2 = nn.Linear(500, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(200)
        self.bn5 = nn.BatchNorm1d(300)
        self.bn6 = nn.BatchNorm1d(500)
        self.bn7 = nn.BatchNorm1d(800)
        self.bn8 = nn.BatchNorm1d(1000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_1k_2h(nn.Module):
    def __init__(self):
        super(Cnn2_1k_2h, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(500, 800, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(800, 1000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(1000, 200)
        self.l2 = nn.Linear(200, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(200)
        self.bn5 = nn.BatchNorm1d(300)
        self.bn6 = nn.BatchNorm1d(500)
        self.bn7 = nn.BatchNorm1d(800)
        self.bn8 = nn.BatchNorm1d(1000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_1k_1h(nn.Module):
    def __init__(self):
        super(Cnn2_1k_1h, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(500, 800, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(800, 1000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(1000, 100)
        self.l2 = nn.Linear(100, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(200)
        self.bn5 = nn.BatchNorm1d(300)
        self.bn6 = nn.BatchNorm1d(500)
        self.bn7 = nn.BatchNorm1d(800)
        self.bn8 = nn.BatchNorm1d(1000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_1k_10(nn.Module):
    def __init__(self):
        super(Cnn2_1k_10, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(500, 800, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(800, 1000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(1000, 10)
        self.l2 = nn.Linear(10, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(200)
        self.bn5 = nn.BatchNorm1d(300)
        self.bn6 = nn.BatchNorm1d(500)
        self.bn7 = nn.BatchNorm1d(800)
        self.bn8 = nn.BatchNorm1d(1000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_5h_6k(nn.Module):
    def __init__(self):
        super(Cnn2_5h_6k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(300, 400, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(400, 500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(500, 500, 3, padding=1, stride=2)
        self.l1 = nn.Linear(500, 6000)
        self.l2 = nn.Linear(6000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(200)
        self.bn5 = nn.BatchNorm1d(300)
        self.bn6 = nn.BatchNorm1d(400)
        self.bn7 = nn.BatchNorm1d(500)
        self.bn8 = nn.BatchNorm1d(500)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_5h_5k(nn.Module):
    def __init__(self):
        super(Cnn2_5h_5k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(300, 400, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(400, 500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(500, 500, 3, padding=1, stride=2)
        self.l1 = nn.Linear(500, 5000)
        self.l2 = nn.Linear(5000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(200)
        self.bn5 = nn.BatchNorm1d(300)
        self.bn6 = nn.BatchNorm1d(400)
        self.bn7 = nn.BatchNorm1d(500)
        self.bn8 = nn.BatchNorm1d(500)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_5h_4k(nn.Module):
    def __init__(self):
        super(Cnn2_5h_4k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(300, 400, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(400, 500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(500, 500, 3, padding=1, stride=2)
        self.l1 = nn.Linear(500, 4000)
        self.l2 = nn.Linear(4000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(200)
        self.bn5 = nn.BatchNorm1d(300)
        self.bn6 = nn.BatchNorm1d(400)
        self.bn7 = nn.BatchNorm1d(500)
        self.bn8 = nn.BatchNorm1d(500)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_5h_3k(nn.Module):
    def __init__(self):
        super(Cnn2_5h_3k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(300, 400, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(400, 500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(500, 500, 3, padding=1, stride=2)
        self.l1 = nn.Linear(500, 3000)
        self.l2 = nn.Linear(3000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(200)
        self.bn5 = nn.BatchNorm1d(300)
        self.bn6 = nn.BatchNorm1d(400)
        self.bn7 = nn.BatchNorm1d(500)
        self.bn8 = nn.BatchNorm1d(500)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_5h_2k(nn.Module):
    def __init__(self):
        super(Cnn2_5h_2k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(300, 400, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(400, 500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(500, 500, 3, padding=1, stride=2)
        self.l1 = nn.Linear(500, 2000)
        self.l2 = nn.Linear(2000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(200)
        self.bn5 = nn.BatchNorm1d(300)
        self.bn6 = nn.BatchNorm1d(400)
        self.bn7 = nn.BatchNorm1d(500)
        self.bn8 = nn.BatchNorm1d(500)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_5h_1k(nn.Module):
    def __init__(self):
        super(Cnn2_5h_1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(300, 400, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(400, 500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(500, 500, 3, padding=1, stride=2)
        self.l1 = nn.Linear(500, 1000)
        self.l2 = nn.Linear(1000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(200)
        self.bn5 = nn.BatchNorm1d(300)
        self.bn6 = nn.BatchNorm1d(400)
        self.bn7 = nn.BatchNorm1d(500)
        self.bn8 = nn.BatchNorm1d(500)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_5h_5h(nn.Module):
    def __init__(self):
        super(Cnn2_5h_5h, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(300, 400, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(400, 500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(500, 500, 3, padding=1, stride=2)
        self.l1 = nn.Linear(500, 500)
        self.l2 = nn.Linear(500, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(200)
        self.bn5 = nn.BatchNorm1d(300)
        self.bn6 = nn.BatchNorm1d(400)
        self.bn7 = nn.BatchNorm1d(500)
        self.bn8 = nn.BatchNorm1d(500)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_5h_2h(nn.Module):
    def __init__(self):
        super(Cnn2_5h_2h, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(300, 400, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(400, 500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(500, 500, 3, padding=1, stride=2)
        self.l1 = nn.Linear(500, 200)
        self.l2 = nn.Linear(200, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(200)
        self.bn5 = nn.BatchNorm1d(300)
        self.bn6 = nn.BatchNorm1d(400)
        self.bn7 = nn.BatchNorm1d(500)
        self.bn8 = nn.BatchNorm1d(500)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_5h_1h(nn.Module):
    def __init__(self):
        super(Cnn2_5h_1h, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(300, 400, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(400, 500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(500, 500, 3, padding=1, stride=2)
        self.l1 = nn.Linear(500, 100)
        self.l2 = nn.Linear(100, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(200)
        self.bn5 = nn.BatchNorm1d(300)
        self.bn6 = nn.BatchNorm1d(400)
        self.bn7 = nn.BatchNorm1d(500)
        self.bn8 = nn.BatchNorm1d(500)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_5h_10(nn.Module):
    def __init__(self):
        super(Cnn2_5h_10, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(300, 400, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(400, 500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(500, 500, 3, padding=1, stride=2)
        self.l1 = nn.Linear(500, 10)
        self.l2 = nn.Linear(10, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(200)
        self.bn5 = nn.BatchNorm1d(300)
        self.bn6 = nn.BatchNorm1d(400)
        self.bn7 = nn.BatchNorm1d(500)
        self.bn8 = nn.BatchNorm1d(500)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_2h_6k(nn.Module):
    def __init__(self):
        super(Cnn2_2h_6k, self).__init__()

        self.conv1 = nn.Conv1d(1, 5, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(5, 10, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(10, 20, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(20, 50, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(50, 80, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(80, 100, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(100, 150, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(150, 200, 3, padding=1, stride=2)
        self.l1 = nn.Linear(200, 6000)
        self.l2 = nn.Linear(6000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(5)
        self.bn2 = nn.BatchNorm1d(10)
        self.bn3 = nn.BatchNorm1d(20)
        self.bn4 = nn.BatchNorm1d(50)
        self.bn5 = nn.BatchNorm1d(80)
        self.bn6 = nn.BatchNorm1d(100)
        self.bn7 = nn.BatchNorm1d(150)
        self.bn8 = nn.BatchNorm1d(200)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_2h_5k(nn.Module):
    def __init__(self):
        super(Cnn2_2h_5k, self).__init__()

        self.conv1 = nn.Conv1d(1, 5, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(5, 10, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(10, 20, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(20, 50, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(50, 80, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(80, 100, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(100, 150, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(150, 200, 3, padding=1, stride=2)
        self.l1 = nn.Linear(200, 5000)
        self.l2 = nn.Linear(5000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(5)
        self.bn2 = nn.BatchNorm1d(10)
        self.bn3 = nn.BatchNorm1d(20)
        self.bn4 = nn.BatchNorm1d(50)
        self.bn5 = nn.BatchNorm1d(80)
        self.bn6 = nn.BatchNorm1d(100)
        self.bn7 = nn.BatchNorm1d(150)
        self.bn8 = nn.BatchNorm1d(200)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_2h_4k(nn.Module):
    def __init__(self):
        super(Cnn2_2h_4k, self).__init__()

        self.conv1 = nn.Conv1d(1, 5, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(5, 10, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(10, 20, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(20, 50, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(50, 80, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(80, 100, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(100, 150, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(150, 200, 3, padding=1, stride=2)
        self.l1 = nn.Linear(200, 4000)
        self.l2 = nn.Linear(4000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(5)
        self.bn2 = nn.BatchNorm1d(10)
        self.bn3 = nn.BatchNorm1d(20)
        self.bn4 = nn.BatchNorm1d(50)
        self.bn5 = nn.BatchNorm1d(80)
        self.bn6 = nn.BatchNorm1d(100)
        self.bn7 = nn.BatchNorm1d(150)
        self.bn8 = nn.BatchNorm1d(200)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_2h_3k(nn.Module):
    def __init__(self):
        super(Cnn2_2h_3k, self).__init__()

        self.conv1 = nn.Conv1d(1, 5, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(5, 10, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(10, 20, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(20, 50, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(50, 80, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(80, 100, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(100, 150, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(150, 200, 3, padding=1, stride=2)
        self.l1 = nn.Linear(200, 3000)
        self.l2 = nn.Linear(3000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(5)
        self.bn2 = nn.BatchNorm1d(10)
        self.bn3 = nn.BatchNorm1d(20)
        self.bn4 = nn.BatchNorm1d(50)
        self.bn5 = nn.BatchNorm1d(80)
        self.bn6 = nn.BatchNorm1d(100)
        self.bn7 = nn.BatchNorm1d(150)
        self.bn8 = nn.BatchNorm1d(200)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_2h_2k(nn.Module):
    def __init__(self):
        super(Cnn2_2h_2k, self).__init__()

        self.conv1 = nn.Conv1d(1, 5, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(5, 10, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(10, 20, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(20, 50, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(50, 80, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(80, 100, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(100, 150, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(150, 200, 3, padding=1, stride=2)
        self.l1 = nn.Linear(200, 2000)
        self.l2 = nn.Linear(2000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(5)
        self.bn2 = nn.BatchNorm1d(10)
        self.bn3 = nn.BatchNorm1d(20)
        self.bn4 = nn.BatchNorm1d(50)
        self.bn5 = nn.BatchNorm1d(80)
        self.bn6 = nn.BatchNorm1d(100)
        self.bn7 = nn.BatchNorm1d(150)
        self.bn8 = nn.BatchNorm1d(200)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_2h_1k(nn.Module):
    def __init__(self):
        super(Cnn2_2h_1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 5, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(5, 10, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(10, 20, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(20, 50, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(50, 80, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(80, 100, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(100, 150, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(150, 200, 3, padding=1, stride=2)
        self.l1 = nn.Linear(200, 1000)
        self.l2 = nn.Linear(1000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(5)
        self.bn2 = nn.BatchNorm1d(10)
        self.bn3 = nn.BatchNorm1d(20)
        self.bn4 = nn.BatchNorm1d(50)
        self.bn5 = nn.BatchNorm1d(80)
        self.bn6 = nn.BatchNorm1d(100)
        self.bn7 = nn.BatchNorm1d(150)
        self.bn8 = nn.BatchNorm1d(200)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_2h_5h(nn.Module):
    def __init__(self):
        super(Cnn2_2h_5h, self).__init__()

        self.conv1 = nn.Conv1d(1, 5, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(5, 10, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(10, 20, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(20, 50, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(50, 80, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(80, 100, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(100, 150, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(150, 200, 3, padding=1, stride=2)
        self.l1 = nn.Linear(200, 500)
        self.l2 = nn.Linear(500, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(5)
        self.bn2 = nn.BatchNorm1d(10)
        self.bn3 = nn.BatchNorm1d(20)
        self.bn4 = nn.BatchNorm1d(50)
        self.bn5 = nn.BatchNorm1d(80)
        self.bn6 = nn.BatchNorm1d(100)
        self.bn7 = nn.BatchNorm1d(150)
        self.bn8 = nn.BatchNorm1d(200)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_2h_2h(nn.Module):
    def __init__(self):
        super(Cnn2_2h_2h, self).__init__()

        self.conv1 = nn.Conv1d(1, 5, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(5, 10, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(10, 20, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(20, 50, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(50, 80, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(80, 100, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(100, 150, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(150, 200, 3, padding=1, stride=2)
        self.l1 = nn.Linear(200, 200)
        self.l2 = nn.Linear(200, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(5)
        self.bn2 = nn.BatchNorm1d(10)
        self.bn3 = nn.BatchNorm1d(20)
        self.bn4 = nn.BatchNorm1d(50)
        self.bn5 = nn.BatchNorm1d(80)
        self.bn6 = nn.BatchNorm1d(100)
        self.bn7 = nn.BatchNorm1d(150)
        self.bn8 = nn.BatchNorm1d(200)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_2h_1h(nn.Module):
    def __init__(self):
        super(Cnn2_2h_1h, self).__init__()

        self.conv1 = nn.Conv1d(1, 5, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(5, 10, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(10, 20, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(20, 50, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(50, 80, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(80, 100, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(100, 150, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(150, 200, 3, padding=1, stride=2)
        self.l1 = nn.Linear(200, 100)
        self.l2 = nn.Linear(100, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(5)
        self.bn2 = nn.BatchNorm1d(10)
        self.bn3 = nn.BatchNorm1d(20)
        self.bn4 = nn.BatchNorm1d(50)
        self.bn5 = nn.BatchNorm1d(80)
        self.bn6 = nn.BatchNorm1d(100)
        self.bn7 = nn.BatchNorm1d(150)
        self.bn8 = nn.BatchNorm1d(200)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_2h_10(nn.Module):
    def __init__(self):
        super(Cnn2_2h_10, self).__init__()

        self.conv1 = nn.Conv1d(1, 5, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(5, 10, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(10, 20, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(20, 50, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(50, 80, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(80, 100, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(100, 150, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(150, 200, 3, padding=1, stride=2)
        self.l1 = nn.Linear(200, 10)
        self.l2 = nn.Linear(10, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(5)
        self.bn2 = nn.BatchNorm1d(10)
        self.bn3 = nn.BatchNorm1d(20)
        self.bn4 = nn.BatchNorm1d(50)
        self.bn5 = nn.BatchNorm1d(80)
        self.bn6 = nn.BatchNorm1d(100)
        self.bn7 = nn.BatchNorm1d(150)
        self.bn8 = nn.BatchNorm1d(200)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_1h_6k(nn.Module):
    def __init__(self):
        super(Cnn2_1h_6k, self).__init__()

        self.conv1 = nn.Conv1d(1, 5, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(5, 10, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(10, 20, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(20, 30, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(30, 40, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(40, 50, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(50, 80, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(80, 100, 3, padding=1, stride=2)
        self.l1 = nn.Linear(100, 6000)
        self.l2 = nn.Linear(6000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(5)
        self.bn2 = nn.BatchNorm1d(10)
        self.bn3 = nn.BatchNorm1d(20)
        self.bn4 = nn.BatchNorm1d(30)
        self.bn5 = nn.BatchNorm1d(40)
        self.bn6 = nn.BatchNorm1d(50)
        self.bn7 = nn.BatchNorm1d(80)
        self.bn8 = nn.BatchNorm1d(100)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_1h_5k(nn.Module):
    def __init__(self):
        super(Cnn2_1h_5k, self).__init__()

        self.conv1 = nn.Conv1d(1, 5, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(5, 10, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(10, 20, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(20, 30, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(30, 40, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(40, 50, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(50, 80, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(80, 100, 3, padding=1, stride=2)
        self.l1 = nn.Linear(100, 5000)
        self.l2 = nn.Linear(5000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(5)
        self.bn2 = nn.BatchNorm1d(10)
        self.bn3 = nn.BatchNorm1d(20)
        self.bn4 = nn.BatchNorm1d(30)
        self.bn5 = nn.BatchNorm1d(40)
        self.bn6 = nn.BatchNorm1d(50)
        self.bn7 = nn.BatchNorm1d(80)
        self.bn8 = nn.BatchNorm1d(100)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_1h_4k(nn.Module):
    def __init__(self):
        super(Cnn2_1h_4k, self).__init__()

        self.conv1 = nn.Conv1d(1, 5, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(5, 10, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(10, 20, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(20, 30, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(30, 40, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(40, 50, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(50, 80, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(80, 100, 3, padding=1, stride=2)
        self.l1 = nn.Linear(100, 4000)
        self.l2 = nn.Linear(4000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(5)
        self.bn2 = nn.BatchNorm1d(10)
        self.bn3 = nn.BatchNorm1d(20)
        self.bn4 = nn.BatchNorm1d(30)
        self.bn5 = nn.BatchNorm1d(40)
        self.bn6 = nn.BatchNorm1d(50)
        self.bn7 = nn.BatchNorm1d(80)
        self.bn8 = nn.BatchNorm1d(100)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_1h_3k(nn.Module):
    def __init__(self):
        super(Cnn2_1h_3k, self).__init__()

        self.conv1 = nn.Conv1d(1, 5, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(5, 10, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(10, 20, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(20, 30, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(30, 40, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(40, 50, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(50, 80, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(80, 100, 3, padding=1, stride=2)
        self.l1 = nn.Linear(100, 3000)
        self.l2 = nn.Linear(3000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(5)
        self.bn2 = nn.BatchNorm1d(10)
        self.bn3 = nn.BatchNorm1d(20)
        self.bn4 = nn.BatchNorm1d(30)
        self.bn5 = nn.BatchNorm1d(40)
        self.bn6 = nn.BatchNorm1d(50)
        self.bn7 = nn.BatchNorm1d(80)
        self.bn8 = nn.BatchNorm1d(100)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_1h_2k(nn.Module):
    def __init__(self):
        super(Cnn2_1h_2k, self).__init__()

        self.conv1 = nn.Conv1d(1, 5, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(5, 10, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(10, 20, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(20, 30, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(30, 40, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(40, 50, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(50, 80, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(80, 100, 3, padding=1, stride=2)
        self.l1 = nn.Linear(100, 2000)
        self.l2 = nn.Linear(2000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(5)
        self.bn2 = nn.BatchNorm1d(10)
        self.bn3 = nn.BatchNorm1d(20)
        self.bn4 = nn.BatchNorm1d(30)
        self.bn5 = nn.BatchNorm1d(40)
        self.bn6 = nn.BatchNorm1d(50)
        self.bn7 = nn.BatchNorm1d(80)
        self.bn8 = nn.BatchNorm1d(100)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_1h_1k(nn.Module):
    def __init__(self):
        super(Cnn2_1h_1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 5, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(5, 10, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(10, 20, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(20, 30, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(30, 40, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(40, 50, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(50, 80, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(80, 100, 3, padding=1, stride=2)
        self.l1 = nn.Linear(100, 1000)
        self.l2 = nn.Linear(1000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(5)
        self.bn2 = nn.BatchNorm1d(10)
        self.bn3 = nn.BatchNorm1d(20)
        self.bn4 = nn.BatchNorm1d(30)
        self.bn5 = nn.BatchNorm1d(40)
        self.bn6 = nn.BatchNorm1d(50)
        self.bn7 = nn.BatchNorm1d(80)
        self.bn8 = nn.BatchNorm1d(100)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_1h_5h(nn.Module):
    def __init__(self):
        super(Cnn2_1h_5h, self).__init__()

        self.conv1 = nn.Conv1d(1, 5, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(5, 10, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(10, 20, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(20, 30, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(30, 40, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(40, 50, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(50, 80, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(80, 100, 3, padding=1, stride=2)
        self.l1 = nn.Linear(100, 500)
        self.l2 = nn.Linear(500, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(5)
        self.bn2 = nn.BatchNorm1d(10)
        self.bn3 = nn.BatchNorm1d(20)
        self.bn4 = nn.BatchNorm1d(30)
        self.bn5 = nn.BatchNorm1d(40)
        self.bn6 = nn.BatchNorm1d(50)
        self.bn7 = nn.BatchNorm1d(80)
        self.bn8 = nn.BatchNorm1d(100)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_1h_2h(nn.Module):
    def __init__(self):
        super(Cnn2_1h_2h, self).__init__()

        self.conv1 = nn.Conv1d(1, 5, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(5, 10, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(10, 20, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(20, 30, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(30, 40, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(40, 50, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(50, 80, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(80, 100, 3, padding=1, stride=2)
        self.l1 = nn.Linear(100, 200)
        self.l2 = nn.Linear(200, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(5)
        self.bn2 = nn.BatchNorm1d(10)
        self.bn3 = nn.BatchNorm1d(20)
        self.bn4 = nn.BatchNorm1d(30)
        self.bn5 = nn.BatchNorm1d(40)
        self.bn6 = nn.BatchNorm1d(50)
        self.bn7 = nn.BatchNorm1d(80)
        self.bn8 = nn.BatchNorm1d(100)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_1h_1h(nn.Module):
    def __init__(self):
        super(Cnn2_1h_1h, self).__init__()

        self.conv1 = nn.Conv1d(1, 5, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(5, 10, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(10, 20, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(20, 30, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(30, 40, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(40, 50, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(50, 80, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(80, 100, 3, padding=1, stride=2)
        self.l1 = nn.Linear(100, 100)
        self.l2 = nn.Linear(100, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(5)
        self.bn2 = nn.BatchNorm1d(10)
        self.bn3 = nn.BatchNorm1d(20)
        self.bn4 = nn.BatchNorm1d(30)
        self.bn5 = nn.BatchNorm1d(40)
        self.bn6 = nn.BatchNorm1d(50)
        self.bn7 = nn.BatchNorm1d(80)
        self.bn8 = nn.BatchNorm1d(100)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_1h_10(nn.Module):
    def __init__(self):
        super(Cnn2_1h_10, self).__init__()

        self.conv1 = nn.Conv1d(1, 5, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(5, 10, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(10, 20, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(20, 30, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(30, 40, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(40, 50, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(50, 80, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(80, 100, 3, padding=1, stride=2)
        self.l1 = nn.Linear(100, 10)
        self.l2 = nn.Linear(10, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(5)
        self.bn2 = nn.BatchNorm1d(10)
        self.bn3 = nn.BatchNorm1d(20)
        self.bn4 = nn.BatchNorm1d(30)
        self.bn5 = nn.BatchNorm1d(40)
        self.bn6 = nn.BatchNorm1d(50)
        self.bn7 = nn.BatchNorm1d(80)
        self.bn8 = nn.BatchNorm1d(100)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_10_6k(nn.Module):
    def __init__(self):
        super(Cnn2_10_6k, self).__init__()

        self.conv1 = nn.Conv1d(1, 2, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(2, 3, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(3, 4, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(4, 5, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(5, 6, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(6, 7, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(7, 8, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(8, 10, 3, padding=1, stride=2)
        self.l1 = nn.Linear(10, 6000)
        self.l2 = nn.Linear(6000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(2)
        self.bn2 = nn.BatchNorm1d(3)
        self.bn3 = nn.BatchNorm1d(4)
        self.bn4 = nn.BatchNorm1d(5)
        self.bn5 = nn.BatchNorm1d(6)
        self.bn6 = nn.BatchNorm1d(7)
        self.bn7 = nn.BatchNorm1d(8)
        self.bn8 = nn.BatchNorm1d(10)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_10_5k(nn.Module):
    def __init__(self):
        super(Cnn2_10_5k, self).__init__()

        self.conv1 = nn.Conv1d(1, 2, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(2, 3, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(3, 4, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(4, 5, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(5, 6, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(6, 7, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(7, 8, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(8, 10, 3, padding=1, stride=2)
        self.l1 = nn.Linear(10, 5000)
        self.l2 = nn.Linear(5000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(2)
        self.bn2 = nn.BatchNorm1d(3)
        self.bn3 = nn.BatchNorm1d(4)
        self.bn4 = nn.BatchNorm1d(5)
        self.bn5 = nn.BatchNorm1d(6)
        self.bn6 = nn.BatchNorm1d(7)
        self.bn7 = nn.BatchNorm1d(8)
        self.bn8 = nn.BatchNorm1d(10)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_10_4k(nn.Module):
    def __init__(self):
        super(Cnn2_10_4k, self).__init__()

        self.conv1 = nn.Conv1d(1, 2, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(2, 3, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(3, 4, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(4, 5, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(5, 6, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(6, 7, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(7, 8, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(8, 10, 3, padding=1, stride=2)
        self.l1 = nn.Linear(10, 4000)
        self.l2 = nn.Linear(4000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(2)
        self.bn2 = nn.BatchNorm1d(3)
        self.bn3 = nn.BatchNorm1d(4)
        self.bn4 = nn.BatchNorm1d(5)
        self.bn5 = nn.BatchNorm1d(6)
        self.bn6 = nn.BatchNorm1d(7)
        self.bn7 = nn.BatchNorm1d(8)
        self.bn8 = nn.BatchNorm1d(10)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_10_3k(nn.Module):
    def __init__(self):
        super(Cnn2_10_3k, self).__init__()

        self.conv1 = nn.Conv1d(1, 2, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(2, 3, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(3, 4, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(4, 5, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(5, 6, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(6, 7, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(7, 8, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(8, 10, 3, padding=1, stride=2)
        self.l1 = nn.Linear(10, 3000)
        self.l2 = nn.Linear(3000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(2)
        self.bn2 = nn.BatchNorm1d(3)
        self.bn3 = nn.BatchNorm1d(4)
        self.bn4 = nn.BatchNorm1d(5)
        self.bn5 = nn.BatchNorm1d(6)
        self.bn6 = nn.BatchNorm1d(7)
        self.bn7 = nn.BatchNorm1d(8)
        self.bn8 = nn.BatchNorm1d(10)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_10_2k(nn.Module):
    def __init__(self):
        super(Cnn2_10_2k, self).__init__()

        self.conv1 = nn.Conv1d(1, 2, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(2, 3, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(3, 4, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(4, 5, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(5, 6, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(6, 7, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(7, 8, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(8, 10, 3, padding=1, stride=2)
        self.l1 = nn.Linear(10, 2000)
        self.l2 = nn.Linear(2000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(2)
        self.bn2 = nn.BatchNorm1d(3)
        self.bn3 = nn.BatchNorm1d(4)
        self.bn4 = nn.BatchNorm1d(5)
        self.bn5 = nn.BatchNorm1d(6)
        self.bn6 = nn.BatchNorm1d(7)
        self.bn7 = nn.BatchNorm1d(8)
        self.bn8 = nn.BatchNorm1d(10)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_10_1k(nn.Module):
    def __init__(self):
        super(Cnn2_10_1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 2, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(2, 3, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(3, 4, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(4, 5, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(5, 6, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(6, 7, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(7, 8, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(8, 10, 3, padding=1, stride=2)
        self.l1 = nn.Linear(10, 1000)
        self.l2 = nn.Linear(1000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(2)
        self.bn2 = nn.BatchNorm1d(3)
        self.bn3 = nn.BatchNorm1d(4)
        self.bn4 = nn.BatchNorm1d(5)
        self.bn5 = nn.BatchNorm1d(6)
        self.bn6 = nn.BatchNorm1d(7)
        self.bn7 = nn.BatchNorm1d(8)
        self.bn8 = nn.BatchNorm1d(10)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_10_5h(nn.Module):
    def __init__(self):
        super(Cnn2_10_5h, self).__init__()

        self.conv1 = nn.Conv1d(1, 2, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(2, 3, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(3, 4, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(4, 5, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(5, 6, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(6, 7, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(7, 8, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(8, 10, 3, padding=1, stride=2)
        self.l1 = nn.Linear(10, 500)
        self.l2 = nn.Linear(500, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(2)
        self.bn2 = nn.BatchNorm1d(3)
        self.bn3 = nn.BatchNorm1d(4)
        self.bn4 = nn.BatchNorm1d(5)
        self.bn5 = nn.BatchNorm1d(6)
        self.bn6 = nn.BatchNorm1d(7)
        self.bn7 = nn.BatchNorm1d(8)
        self.bn8 = nn.BatchNorm1d(10)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_10_2h(nn.Module):
    def __init__(self):
        super(Cnn2_10_2h, self).__init__()

        self.conv1 = nn.Conv1d(1, 2, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(2, 3, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(3, 4, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(4, 5, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(5, 6, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(6, 7, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(7, 8, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(8, 10, 3, padding=1, stride=2)
        self.l1 = nn.Linear(10, 200)
        self.l2 = nn.Linear(200, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(2)
        self.bn2 = nn.BatchNorm1d(3)
        self.bn3 = nn.BatchNorm1d(4)
        self.bn4 = nn.BatchNorm1d(5)
        self.bn5 = nn.BatchNorm1d(6)
        self.bn6 = nn.BatchNorm1d(7)
        self.bn7 = nn.BatchNorm1d(8)
        self.bn8 = nn.BatchNorm1d(10)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_10_1h(nn.Module):
    def __init__(self):
        super(Cnn2_10_1h, self).__init__()

        self.conv1 = nn.Conv1d(1, 2, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(2, 3, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(3, 4, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(4, 5, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(5, 6, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(6, 7, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(7, 8, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(8, 10, 3, padding=1, stride=2)
        self.l1 = nn.Linear(10, 100)
        self.l2 = nn.Linear(100, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(2)
        self.bn2 = nn.BatchNorm1d(3)
        self.bn3 = nn.BatchNorm1d(4)
        self.bn4 = nn.BatchNorm1d(5)
        self.bn5 = nn.BatchNorm1d(6)
        self.bn6 = nn.BatchNorm1d(7)
        self.bn7 = nn.BatchNorm1d(8)
        self.bn8 = nn.BatchNorm1d(10)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class Cnn2_10_10(nn.Module):
    def __init__(self):
        super(Cnn2_10_10, self).__init__()

        self.conv1 = nn.Conv1d(1, 2, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(2, 3, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(3, 4, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(4, 5, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(5, 6, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(6, 7, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(7, 8, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(8, 10, 3, padding=1, stride=2)
        self.l1 = nn.Linear(10, 10)
        self.l2 = nn.Linear(10, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(2)
        self.bn2 = nn.BatchNorm1d(3)
        self.bn3 = nn.BatchNorm1d(4)
        self.bn4 = nn.BatchNorm1d(5)
        self.bn5 = nn.BatchNorm1d(6)
        self.bn6 = nn.BatchNorm1d(7)
        self.bn7 = nn.BatchNorm1d(8)
        self.bn8 = nn.BatchNorm1d(10)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)

